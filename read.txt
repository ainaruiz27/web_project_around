// para cualquier formulario 
// deshabilidar el boton de submit
// indicar con un mensaje y con estilos si la entrada es correcta

const settings = {
    formSelector: ".form",
    inputSelector: ".form__input",
    submitButtonSelector: ".form__button",
    inactiveButtonClass: "button_inactive",
    inputErrorClass: ".form__input_type_error",
    errorClass: "form__input-error_active",
};

function activarValidador(form){
    // obtener todos los inputs del formulario
    const inputList = Array.from(document.querySelectorAll(settings.inputSelector));
    const buttonSubmit = form.querySelector(settings.submitButtonSelector)
    inputList.forEach(function(formElement){
        formElement.addEventListener('input', (event) => {
            const errorContent = form.querySelector(`.${event.target.name}-error`)
            if(event.target.validity.valid){
                errorContent.textContent = '';
                event.target.classList.remove(settings.errorClass)
            }else{
                event.target.classList.add(settings.errorClass)
                errorContent.textContent = event.target.validationMessage;
            }
            buttonSubmit.disabled = !inputList.every((item) => {´
                return item.validity.valid;
            });
        })
    });
    buttonSubmit.disabled = !inputList.every((item) => {´
        return item.validity.valid;
    });
}

const forms= document.querySelectorAll(settings.formSelector)
forms.forEach((item) => {
    activarValidador(item)
})


TARGETA CARD/*
  _getTemplate() {
    const cardElement = document
      .querySelector(this._templateSelector)
      .content.querySelector('.card')
      .cloneNode(true);

    return cardElement;
  }

  _setEventListeners() {
    this._likeButton.addEventListener('click', this._likeHandler);
    this._deleteButton.addEventListener('click', this._deleteHandler);
    this._cardImage.addEventListener('click', this._previewHandler);
  }

  _handleLikeIcon(evt) {
    evt.target.classList.toggle('card__like_active');
  }

  _handleDeleteCard() {
    this._element.remove();
  }

  _handlePreviewPicture() {
    // Lógica para mostrar una vista previa de la imagen
    // Puedes utilizar la función handlePreviewPicture que ya tienes implementada
    handlePreviewPicture(this._link, this._name);
  }

  generateCard() {
    this._cardImage.src = this._link;
    this._cardImage.alt = this._name;
    this._element.querySelector('.card__text').textContent = this._name;

    return this._element;
  }


// Ejemplo de uso:
const initialCards = [
  {
    name: 'Valle de Yosemite',
    link: 'https://practicum-content.s3.us-west-1.amazonaws.com/new-markets/WEB_sprint_5/ES/yosemite.jpg',
  },
  // ... Otras tarjetas ...
];

const cardContainer = document.querySelector('.elements');
const cardTemplateSelector = '.template';

initialCards.forEach((cardData) => {
  const card = new Card(cardData, cardTemplateSelector);
  const cardElement = card.generateCard();
  cardContainer.append(cardElement);
});


/*export default class FormValidator {
  constructor(config, formElement) {
    this._config = config;
    this._formElement = formElement;
    this._inputList = Array.from(
      formElement.querySelectorAll(this._config.inputSelector)
    );
    this._buttonElement = formElement.querySelector(
      this._config.submitButtonSelector
    );

    this._inputErrorClass = this._config.inputErrorClass;
    this._errorClass = this._config.errorClass;

    this._submitButtonState = this._config.submitButtonState;
   

    this._setEventListeners();
  }

  _setEventListeners() {
    this._inputList.forEach((inputElement) => {
      inputElement.addEventListener("input", () => {
        this._checkInputValidity(inputElement);
        this._toggleButtonState();
      });
    });

    this._formElement.addEventListener("submit", (evt) => {
      evt.preventDefault();
    });
  }

  _checkInputValidity(inputElement) {
    if (!inputElement.validity.valid) {
      this._showInputError(inputElement);
    } else {
      this._hideInputError(inputElement);
    }
  }

  _showInputError(inputElement) {
    const errorElement = this._formElement.querySelector(
      `.${inputElement.id}-error`
    );
    inputElement.classList.add(this._inputErrorClass);
    errorElement.textContent = inputElement.validationMessage;
    errorElement.classList.add(this._errorClass);
  }

  _hideInputError(inputElement) {
    const errorElement = this._formElement.querySelector(
      `.${inputElement.id}-error`
    );
    inputElement.classList.remove(this._inputErrorClass);
    errorElement.textContent = "";
    errorElement.classList.remove(this._errorClass);
  }

  _hasInvalidInput() {
    return this._inputList.some((inputElement) => !inputElement.validity.valid);
  }

  _toggleButtonState() {
    if (this._hasInvalidInput()) {
      this._buttonElement.classList.add(this._submitButtonState.disabledClass);
      this._buttonElement.disabled = true;
    } else {
      this._buttonElement.classList.remove(
        this._submitButtonState.disabledClass
      );
      this._buttonElement.disabled = false;
    }
  }

  enableValidation() {
    this._inputList.forEach((inputElement) => {
      inputElement.addEventListener("input", () => {
        this._checkInputValidity(inputElement);
        this._toggleButtonState();
      });
    });

    this._toggleButtonState();
  }
}*/